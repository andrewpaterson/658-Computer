package name.bizna.emu65816;

import name.bizna.emu65816.opcode.*;

import java.util.ArrayList;
import java.util.List;

import static name.bizna.emu65816.AddressingMode.*;

public class OpCodeTable
{
  public static OpCode[] createTable()
  {
    List<OpCode> opCodes = new ArrayList<>();
    add(opCodes, new OpCode_BRK("BRK", (byte) 0x00, Interrupt));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x01, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_COP("COP", (byte) 0x02, Interrupt));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x03, StackRelative));
    add(opCodes, new OpCode_TSB("TSB", (byte) 0x04, DirectPage));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x05, DirectPage));
    add(opCodes, new OpCode_ASL("ASL", (byte) 0x06, DirectPage));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x07, DirectPageIndirectLong));
    add(opCodes, new OpCode_PHP("PHP", (byte) 0x08, StackImplied));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x09, Immediate));
    add(opCodes, new OpCode_ASL("ASL", (byte) 0x0A, Accumulator));
    add(opCodes, new OpCode_PHD("PHD", (byte) 0x0B, StackImplied));
    add(opCodes, new OpCode_TSB("TSB", (byte) 0x0C, Absolute));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x0D, Absolute));
    add(opCodes, new OpCode_ASL("ASL", (byte) 0x0E, Absolute));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x0F, AbsoluteLong));
    add(opCodes, new OpCode_BPL("BPL", (byte) 0x10, ProgramCounterRelative));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x11, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x12, DirectPageIndirect));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x13, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_TRB("TRB", (byte) 0x14, DirectPage));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x15, DirectPageIndexedWithX));
    add(opCodes, new OpCode_ASL("ASL", (byte) 0x16, DirectPageIndexedWithX));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x17, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_CLC("CLC", (byte) 0x18, Implied));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x19, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_INC("INC", (byte) 0x1A, Accumulator));
    add(opCodes, new OpCode_TCS("TCS", (byte) 0x1B, Implied));
    add(opCodes, new OpCode_TRB("TRB", (byte) 0x1C, Absolute));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x1D, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_ASL("ASL", (byte) 0x1E, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_ORA("ORA", (byte) 0x1F, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_JSR("JSR", (byte) 0x20, Absolute));
    add(opCodes, new OpCode_AND("AND", (byte) 0x21, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_JSR("JSR", (byte) 0x22, AbsoluteLong));
    add(opCodes, new OpCode_AND("AND", (byte) 0x23, StackRelative));
    add(opCodes, new OpCode_BIT("BIT", (byte) 0x24, DirectPage));
    add(opCodes, new OpCode_AND("AND", (byte) 0x25, DirectPage));
    add(opCodes, new OpCode_ROL("ROL", (byte) 0x26, DirectPage));
    add(opCodes, new OpCode_AND("AND", (byte) 0x27, DirectPageIndirectLong));
    add(opCodes, new OpCode_PLP("PLP", (byte) 0x28, StackImplied));
    add(opCodes, new OpCode_AND("AND", (byte) 0x29, Immediate));
    add(opCodes, new OpCode_ROL("ROL", (byte) 0x2A, Accumulator));
    add(opCodes, new OpCode_PLD("PLD", (byte) 0x2B, StackImplied));
    add(opCodes, new OpCode_BIT("BIT", (byte) 0x2C, Absolute));
    add(opCodes, new OpCode_AND("AND", (byte) 0x2D, Absolute));
    add(opCodes, new OpCode_ROL("ROL", (byte) 0x2E, Absolute));
    add(opCodes, new OpCode_AND("AND", (byte) 0x2F, AbsoluteLong));
    add(opCodes, new OpCode_BMI("BMI", (byte) 0x30, ProgramCounterRelative));
    add(opCodes, new OpCode_AND("AND", (byte) 0x31, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_AND("AND", (byte) 0x32, DirectPageIndirect));
    add(opCodes, new OpCode_AND("AND", (byte) 0x33, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_BIT("BIT", (byte) 0x34, DirectPageIndexedWithX));
    add(opCodes, new OpCode_AND("AND", (byte) 0x35, DirectPageIndexedWithX));
    add(opCodes, new OpCode_ROL("ROL", (byte) 0x36, DirectPageIndexedWithX));
    add(opCodes, new OpCode_AND("AND", (byte) 0x37, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_SEC("SEC", (byte) 0x38, Implied));
    add(opCodes, new OpCode_AND("AND", (byte) 0x39, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_DEC("DEC", (byte) 0x3A, Accumulator));
    add(opCodes, new OpCode_TSC("TSC", (byte) 0x3B, Implied));
    add(opCodes, new OpCode_BIT("BIT", (byte) 0x3C, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_AND("AND", (byte) 0x3D, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_ROL("ROL", (byte) 0x3E, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_AND("AND", (byte) 0x3F, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_RTI("RTI", (byte) 0x40, StackImplied));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x41, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_WDM("WDM", (byte) 0x42, Implied));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x43, StackRelative));
    add(opCodes, new OpCode_MVP("MVP", (byte) 0x44, BlockMove));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x45, DirectPage));
    add(opCodes, new OpCode_LSR("LSR", (byte) 0x46, DirectPage));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x47, DirectPageIndirectLong));
    add(opCodes, new OpCode_PHA("PHA", (byte) 0x48, StackImplied));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x49, Immediate));
    add(opCodes, new OpCode_LSR("LSR", (byte) 0x4A, Accumulator));
    add(opCodes, new OpCode_PHK("PHK", (byte) 0x4B, StackImplied));
    add(opCodes, new OpCode_JMP("JMP", (byte) 0x4C, Absolute));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x4D, Absolute));
    add(opCodes, new OpCode_LSR("LSR", (byte) 0x4E, Absolute));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x4F, AbsoluteLong));
    add(opCodes, new OpCode_BVC("BVC", (byte) 0x50, ProgramCounterRelative));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x51, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x52, DirectPageIndirect));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x53, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_MVN("MVN", (byte) 0x54, BlockMove));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x55, DirectPageIndexedWithX));
    add(opCodes, new OpCode_LSR("LSR", (byte) 0x56, DirectPageIndexedWithX));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x57, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_CLI("CLI", (byte) 0x58, Implied));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x59, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_PHY("PHY", (byte) 0x5A, StackImplied));
    add(opCodes, new OpCode_TCD("TCD", (byte) 0x5B, Implied));
    add(opCodes, new OpCode_JMP("JMP", (byte) 0x5C, AbsoluteLong));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x5D, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_LSR("LSR", (byte) 0x5E, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_EOR("EOR", (byte) 0x5F, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_RTS("RTS", (byte) 0x60, StackImplied));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x61, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_PER("PER", (byte) 0x62, StackProgramCounterRelativeLong));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x63, StackRelative));
    add(opCodes, new OpCode_STZ("STZ", (byte) 0x64, DirectPage));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x65, DirectPage));
    add(opCodes, new OpCode_ROR("ROR", (byte) 0x66, DirectPage));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x67, DirectPageIndirectLong));
    add(opCodes, new OpCode_PLA("PLA", (byte) 0x68, StackImplied));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x69, Immediate));
    add(opCodes, new OpCode_ROR("ROR", (byte) 0x6A, Accumulator));
    add(opCodes, new OpCode_RTL("RTL", (byte) 0x6B, StackImplied));
    add(opCodes, new OpCode_JMP("JMP", (byte) 0x6C, AbsoluteIndirect));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x6D, Absolute));
    add(opCodes, new OpCode_ROR("ROR", (byte) 0x6E, Absolute));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x6F, AbsoluteLong));
    add(opCodes, new OpCode_BVS("BVS", (byte) 0x70, ProgramCounterRelative));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x71, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x72, DirectPageIndirect));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x73, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_STZ("STZ", (byte) 0x74, DirectPageIndexedWithX));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x75, DirectPageIndexedWithX));
    add(opCodes, new OpCode_ROR("ROR", (byte) 0x76, DirectPageIndexedWithX));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x77, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_SEI("SEI", (byte) 0x78, Implied));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x79, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_PLY("PLY", (byte) 0x7A, StackImplied));
    add(opCodes, new OpCode_TDC("TDC", (byte) 0x7B, Implied));
    add(opCodes, new OpCode_JMP("JMP", (byte) 0x7C, AbsoluteIndexedIndirectWithX));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x7D, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_ROR("ROR", (byte) 0x7E, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_ADC("ADC", (byte) 0x7F, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_BRA("BRA", (byte) 0x80, ProgramCounterRelative));
    add(opCodes, new OpCode_STA("STA", (byte) 0x81, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_BRL("BRL", (byte) 0x82, ProgramCounterRelativeLong));
    add(opCodes, new OpCode_STA("STA", (byte) 0x83, StackRelative));
    add(opCodes, new OpCode_STY("STY", (byte) 0x84, DirectPage));
    add(opCodes, new OpCode_STA("STA", (byte) 0x85, DirectPage));
    add(opCodes, new OpCode_STX("STX", (byte) 0x86, DirectPage));
    add(opCodes, new OpCode_STA("STA", (byte) 0x87, DirectPageIndirectLong));
    add(opCodes, new OpCode_DEY("DEY", (byte) 0x88, Implied));
    add(opCodes, new OpCode_BIT("BIT", (byte) 0x89, Immediate));
    add(opCodes, new OpCode_TXA("TXA", (byte) 0x8A, Implied));
    add(opCodes, new OpCode_PHB("PHB", (byte) 0x8B, StackImplied));
    add(opCodes, new OpCode_STY("STY", (byte) 0x8C, Absolute));
    add(opCodes, new OpCode_STA("STA", (byte) 0x8D, Absolute));
    add(opCodes, new OpCode_STX("STX", (byte) 0x8E, Absolute));
    add(opCodes, new OpCode_STA("STA", (byte) 0x8F, AbsoluteLong));
    add(opCodes, new OpCode_BCC("BCC", (byte) 0x90, ProgramCounterRelative));
    add(opCodes, new OpCode_STA("STA", (byte) 0x91, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_STA("STA", (byte) 0x92, DirectPageIndirect));
    add(opCodes, new OpCode_STA("STA", (byte) 0x93, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_STY("STY", (byte) 0x94, DirectPageIndexedWithX));
    add(opCodes, new OpCode_STA("STA", (byte) 0x95, DirectPageIndexedWithX));
    add(opCodes, new OpCode_STX("STX", (byte) 0x96, DirectPageIndexedWithY));
    add(opCodes, new OpCode_STA("STA", (byte) 0x97, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_TYA("TYA", (byte) 0x98, Implied));
    add(opCodes, new OpCode_STA("STA", (byte) 0x99, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_TXS("TXS", (byte) 0x9A, Implied));
    add(opCodes, new OpCode_TXY("TXY", (byte) 0x9B, Implied));
    add(opCodes, new OpCode_STZ("STZ", (byte) 0x9C, Absolute));
    add(opCodes, new OpCode_STA("STA", (byte) 0x9D, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_STZ("STZ", (byte) 0x9E, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_STA("STA", (byte) 0x9F, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_LDY("LDY", (byte) 0xA0, Immediate));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xA1, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_LDX("LDX", (byte) 0xA2, Immediate));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xA3, StackRelative));
    add(opCodes, new OpCode_LDY("LDY", (byte) 0xA4, DirectPage));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xA5, DirectPage));
    add(opCodes, new OpCode_LDX("LDX", (byte) 0xA6, DirectPage));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xA7, DirectPageIndirectLong));
    add(opCodes, new OpCode_TAY("TAY", (byte) 0xA8, Implied));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xA9, Immediate));
    add(opCodes, new OpCode_TAX("TAX", (byte) 0xAA, Implied));
    add(opCodes, new OpCode_PLB("PLB", (byte) 0xAB, StackImplied));
    add(opCodes, new OpCode_LDY("LDY", (byte) 0xAC, Absolute));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xAD, Absolute));
    add(opCodes, new OpCode_LDX("LDX", (byte) 0xAE, Absolute));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xAF, AbsoluteLong));
    add(opCodes, new OpCode_BCS("BCS", (byte) 0xB0, ProgramCounterRelative));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xB1, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xB2, DirectPageIndirect));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xB3, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_LDY("LDY", (byte) 0xB4, DirectPageIndexedWithX));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xB5, DirectPageIndexedWithX));
    add(opCodes, new OpCode_LDX("LDX", (byte) 0xB6, DirectPageIndexedWithY));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xB7, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_CLV("CLV", (byte) 0xB8, Implied));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xB9, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_TSX("TSX", (byte) 0xBA, Implied));
    add(opCodes, new OpCode_TYX("TYX", (byte) 0xBB, Implied));
    add(opCodes, new OpCode_LDY("LDY", (byte) 0xBC, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xBD, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_LDX("LDX", (byte) 0xBE, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_LDA("LDA", (byte) 0xBF, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_CPY("CPY", (byte) 0xC0, Immediate));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xC1, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_REP("REP", (byte) 0xC2, Immediate));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xC3, StackRelative));
    add(opCodes, new OpCode_CPY("CPY", (byte) 0xC4, DirectPage));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xC5, DirectPage));
    add(opCodes, new OpCode_DEC("DEC", (byte) 0xC6, DirectPage));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xC7, DirectPageIndirectLong));
    add(opCodes, new OpCode_INY("INY", (byte) 0xC8, Implied));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xC9, Immediate));
    add(opCodes, new OpCode_DEX("DEX", (byte) 0xCA, Implied));
    add(opCodes, new OpCode_WAI("WAI", (byte) 0xCB, Implied));
    add(opCodes, new OpCode_CPY("CPY", (byte) 0xCC, Absolute));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xCD, Absolute));
    add(opCodes, new OpCode_DEC("DEC", (byte) 0xCE, Absolute));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xCF, AbsoluteLong));
    add(opCodes, new OpCode_BNE("BNE", (byte) 0xD0, ProgramCounterRelative));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xD1, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xD2, DirectPageIndirect));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xD3, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_PEI("PEI", (byte) 0xD4, StackDirectPageIndirect));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xD5, DirectPageIndexedWithX));
    add(opCodes, new OpCode_DEC("DEC", (byte) 0xD6, DirectPageIndexedWithX));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xD7, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_CLD("CLD", (byte) 0xD8, Implied));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xD9, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_PHX("PHX", (byte) 0xDA, StackImplied));
    add(opCodes, new OpCode_STP("STP", (byte) 0xDB, Implied));
    add(opCodes, new OpCode_JMP("JMP", (byte) 0xDC, AbsoluteIndirectLong));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xDD, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_DEC("DEC", (byte) 0xDE, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_CMP("CMP", (byte) 0xDF, AbsoluteLongIndexedWithX));
    add(opCodes, new OpCode_CPX("CPX", (byte) 0xE0, Immediate));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xE1, DirectPageIndexedIndirectWithX));
    add(opCodes, new OpCode_SEP("SEP", (byte) 0xE2, Immediate));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xE3, StackRelative));
    add(opCodes, new OpCode_CPX("CPX", (byte) 0xE4, DirectPage));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xE5, DirectPage));
    add(opCodes, new OpCode_INC("INC", (byte) 0xE6, DirectPage));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xE7, DirectPageIndirectLong));
    add(opCodes, new OpCode_INX("INX", (byte) 0xE8, Implied));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xE9, Immediate));
    add(opCodes, new OpCode_NOP("NOP", (byte) 0xEA, Implied));
    add(opCodes, new OpCode_XBA("XBA", (byte) 0xEB, Implied));
    add(opCodes, new OpCode_CPX("CPX", (byte) 0xEC, Absolute));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xED, Absolute));
    add(opCodes, new OpCode_INC("INC", (byte) 0xEE, Absolute));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xEF, AbsoluteLong));
    add(opCodes, new OpCode_BEQ("BEQ", (byte) 0xF0, ProgramCounterRelative));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xF1, DirectPageIndirectIndexedWithY));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xF2, DirectPageIndirect));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xF3, StackRelativeIndirectIndexedWithY));
    add(opCodes, new OpCode_PEA("PEA", (byte) 0xF4, StackAbsolute));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xF5, DirectPageIndexedWithX));
    add(opCodes, new OpCode_INC("INC", (byte) 0xF6, DirectPageIndexedWithX));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xF7, DirectPageIndirectLongIndexedWithY));
    add(opCodes, new OpCode_SED("SED", (byte) 0xF8, Implied));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xF9, AbsoluteIndexedWithY));
    add(opCodes, new OpCode_PLX("PLX", (byte) 0xFA, StackImplied));
    add(opCodes, new OpCode_XCE("XCE", (byte) 0xFB, Implied));
    add(opCodes, new OpCode_JSR("JSR", (byte) 0xFC, AbsoluteIndexedIndirectWithX));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xFD, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_INC("INC", (byte) 0xFE, AbsoluteIndexedWithX));
    add(opCodes, new OpCode_SBC("SBC", (byte) 0xFF, AbsoluteLongIndexedWithX));

    return (OpCode[]) opCodes.toArray();
  }

  public static void add(List<OpCode> opCodes, OpCode opCode)
  {
    opCodes.add(opCode);
  }
}

